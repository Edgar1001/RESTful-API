
 
Requirements:
 - Use Python 3 and the Flask library.
 - Use MongoDB as a datastore for the data provided in the file "songs.json".
 - All routes should return valid JSON.
 - Define a descriptive name for the route and declare the methods (GET, POST, etc.) it supports.
 - Write tests for the API.
 - Write a README with all instructions to set up the project.
 - Take into consideration that the number of songs and ratings will grow to millions of documents as well as the number of users using the API.
 
List of routes to implement:
- A
  - Returns a list of songs with the data provided by the "songs.json".
  - Add a way to paginate songs.
 
- B
  - Returns the average difficulty for all songs.
  - Takes an optional parameter "level" to filter for only songs from a specific level.
 
- C
  - Returns a list of songs matching the search string.
  - Takes a required parameter "message" containing the user's search string.
  - The search should take into account song's artist and title.
  - The search should be case insensitive.
 
- D
  - Adds a rating for the given song.
  - Takes required parameters "song_id" and "rating"
  - Ratings should be between 1 and 5 inclusive.
 
- E
  - Returns the average, the lowest and the highest rating of the given song id.
 
To simplify development you can run MongoDB in a Docker container using the following command:
 
docker run --detach --name songs_db --publish 127.0.0.1:27017:27017 mongo:4.4
 
And then connect to it at localhost:27017
 

